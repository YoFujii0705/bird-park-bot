const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const achievementManager = require('../utils/achievements');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('achievements')
        .setDescription('„ÅÇ„Å™„Åü„ÅÆÁß∞Âè∑„Å®Áµ±Ë®à„ÇíÁ¢∫Ë™ç„Åó„Åæ„ÅôüèÜ')
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('ÂèñÂæóÊ∏à„Åø„ÅÆÁß∞Âè∑‰∏ÄË¶ß„ÇíË°®Á§∫'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('stats')
                .setDescription('Ë©≥Á¥∞„Å™Áµ±Ë®àÊÉÖÂ†±„ÇíË°®Á§∫'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('progress')
                .setDescription('Êú™ÂèñÂæóÁß∞Âè∑„ÅÆÈÄ≤Êçó„ÇíË°®Á§∫')),

    async execute(interaction) {
        try {
            const subcommand = interaction.options.getSubcommand();
            const userId = interaction.user.id;
            const userName = interaction.user.username;
            const serverId = interaction.guild.id;

            await interaction.deferReply();

            switch (subcommand) {
                case 'list':
                    await this.handleListCommand(interaction, userId, userName, serverId);
                    break;
                case 'stats':
                    await this.handleStatsCommand(interaction, userId, userName, serverId);
                    break;
                case 'progress':
                    await this.handleProgressCommand(interaction, userId, userName, serverId);
                    break;
            }

        } catch (error) {
            console.error('Áß∞Âè∑„Ç≥„Éû„É≥„Éâ„Ç®„É©„Éº:', error);
            
            const errorMessage = 'Áß∞Âè∑ÊÉÖÂ†±„ÅÆÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ';
            if (interaction.deferred) {
                await interaction.editReply({ content: errorMessage });
            } else {
                await interaction.reply({ content: errorMessage, ephemeral: true });
            }
        }
    }, // ‚Üê„Ç≥„É≥„ÉûËøΩÂä†

    async handleListCommand(interaction, userId, userName, serverId) {
        try {
            const userAchievements = await achievementManager.getUserAchievements(userId, serverId);
            const stats = await achievementManager.getUserStats(userId, serverId);

            if (userAchievements.length === 0) {
                const embed = new EmbedBuilder()
                    .setTitle('üèÜ Áß∞Âè∑‰∏ÄË¶ß')
                    .setDescription('„Åæ„Å†Áß∞Âè∑„ÇíÂèñÂæó„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ\nÈ≥•È°ûÂúí„ÅßÊ¥ªÂãï„Åó„Å¶Áß∞Âè∑„ÇíÁç≤Âæó„Åó„Åæ„Åó„Çá„ÅÜÔºÅ')
                    .setColor(0x808080)
                    .addFields({
                        name: 'üí° „Éí„É≥„Éà',
                        value: '‚Ä¢ È§å„ÇÑ„Çä„Çí„Åó„Å¶„Äå„ÅØ„Åò„ÇÅ„Å¶„ÅÆÈ§å„ÇÑ„Çä„Äç„ÇíÁç≤Âæó\n‚Ä¢ „Ç¨„ÉÅ„É£„ÇíÂõû„Åó„Å¶„Äå„Ç¨„ÉÅ„É£ÂàùÂøÉËÄÖ„Äç„ÇíÁç≤Âæó\n‚Ä¢ È≥•„Å®‰ª≤ËâØ„Åè„Å™„Å£„Å¶„Äå„ÅØ„Åò„ÇÅ„Å¶„ÅÆÁµÜ„Äç„ÇíÁç≤Âæó',
                        inline: false
                    })
                    .setTimestamp();

                await interaction.editReply({ embeds: [embed] });
                return;
            }

            // Áß∞Âè∑„Çí„É¨„Ç¢„É™„ÉÜ„Ç£Âà•„Å´ÂàÜÈ°û
            const achievementsByRarity = {};
            
            for (const achievementTitle of userAchievements) {
                const achievement = this.findAchievementByTitle(achievementTitle);
                if (achievement) {
                    const rarity = achievement.rarity;
                    if (!achievementsByRarity[rarity]) {
                        achievementsByRarity[rarity] = [];
                    }
                    achievementsByRarity[rarity].push({
                        title: achievementTitle,
                        ...achievement
                    });
                }
            }

            const embed = new EmbedBuilder()
                .setTitle('üèÜ Áß∞Âè∑‰∏ÄË¶ß')
                .setDescription(`${userName}„Åï„Çì„ÅÆÁç≤ÂæóÁß∞Âè∑: **${userAchievements.length}ÂÄã**`)
                .setColor(0xFFD700)
                .setTimestamp();

            // „É¨„Ç¢„É™„ÉÜ„Ç£È†Ü„ÅßË°®Á§∫
            const rarityOrder = ['mythic', 'legendary', 'epic', 'rare', 'uncommon', 'common'];
            const rarityNames = {
                'mythic': 'üåü Á•ûË©±',
                'legendary': 'üëë ‰ºùË™¨', 
                'epic': 'üíú Âèô‰∫ãË©©',
                'rare': 'üíô „É¨„Ç¢',
                'uncommon': 'üíö „Ç¢„É≥„Ç≥„É¢„É≥',
                'common': 'ü§ç „Ç≥„É¢„É≥'
            };

            for (const rarity of rarityOrder) {
                if (achievementsByRarity[rarity]) {
                    const achievementList = achievementsByRarity[rarity]
                        .map(achievement => `${achievement.emoji} **${achievement.title}**\n*${achievement.description}*`)
                        .join('\n\n');

                    embed.addFields({
                        name: rarityNames[rarity],
                        value: achievementList,
                        inline: false
                    });
                }
            }

            // Á∑èÂêà„É©„É≥„ÇØË°®Á§∫
            const rank = this.calculateUserRank(stats, userAchievements.length);
            embed.addFields({
                name: 'üèÖ Á∑èÂêà„É©„É≥„ÇØ',
                value: `${rank.emoji} **${rank.name}**\n${rank.description}`,
                inline: false
            });

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Áß∞Âè∑‰∏ÄË¶ßË°®Á§∫„Ç®„É©„Éº:', error);
            await interaction.editReply({ content: 'Áß∞Âè∑‰∏ÄË¶ß„ÅÆË°®Á§∫‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ' });
        }
    }, // ‚Üê„Ç≥„É≥„ÉûËøΩÂä†

    async handleStatsCommand(interaction, userId, userName, serverId) {
        try {
            const stats = await achievementManager.getUserStats(userId, serverId);
            const userAchievements = await achievementManager.getUserAchievements(userId, serverId);

            const embed = new EmbedBuilder()
                .setTitle('üìä Ë©≥Á¥∞Áµ±Ë®à')
                .setDescription(`${userName}„Åï„Çì„ÅÆÈ≥•È°ûÂúíÊ¥ªÂãïË®òÈå≤`)
                .setColor(0x00AE86)
                .addFields(
                    {
                        name: 'üçΩÔ∏è È§å„ÇÑ„ÇäÁµ±Ë®à',
                        value: `‚Ä¢ Á∑èÈ§å„ÇÑ„ÇäÂõûÊï∞: **${stats.totalFeeds || 0}Âõû**\n‚Ä¢ È§å„ÇÑ„Çä„Åó„ÅüÈ≥•„ÅÆÁ®ÆÈ°û: **${stats.uniqueBirdsFed || 0}Á®Æ**\n‚Ä¢ Êó©ÊúùÈ§å„ÇÑ„Çä: **${stats.morningFeeds || 0}Âõû**\n‚Ä¢ Â§úÈñìÈ§å„ÇÑ„Çä: **${stats.lateFeeds || 0}Âõû**`,
                        inline: true
                    },
                    {
                        name: 'üíù ÂèãÊÉÖÁµ±Ë®à',
                        value: `‚Ä¢ Â•ΩÊÑüÂ∫¶ÊúÄÂ§ß„ÅÆÈ≥•: **${stats.maxAffinityBirds || 0}ÁæΩ**\n‚Ä¢ „É¨„Éô„É´10„ÅÆÈ≥•: **${stats.level10Birds || 0}ÁæΩ**`,
                        inline: true
                    },
                    {
                        name: 'üéÅ Ë¥à„ÇäÁâ©Áµ±Ë®à',
                        value: `‚Ä¢ Âèó„ÅëÂèñ„Å£„ÅüË¥à„ÇäÁâ©: **${stats.totalGiftsReceived || 0}ÂÄã**\n‚Ä¢ Ë¥à„Å£„ÅüË¥à„ÇäÁâ©: **${stats.totalGiftsGiven || 0}ÂÄã**`,
                        inline: true
                    },
                    {
                        name: 'üé≤ „Ç¨„ÉÅ„É£Áµ±Ë®à', 
                        value: `‚Ä¢ „Ç¨„ÉÅ„É£ÂõûÊï∞: **${stats.totalGachas || 0}Âõû**\n‚Ä¢ Ë¶ãÂ≠¶ÊãõÂæÖÊï∞: **${stats.visitorsInvited || 0}ÁæΩ**`,
                        inline: true
                    },
                    {
                        name: 'üèÜ Áß∞Âè∑Áµ±Ë®à',
                        value: `‚Ä¢ ÂèñÂæóÊ∏à„ÅøÁß∞Âè∑: **${userAchievements.length}ÂÄã**\n‚Ä¢ ÂÖ®Áß∞Âè∑Êï∞: **${this.getTotalAchievementCount()}ÂÄã**\n‚Ä¢ ÈÅîÊàêÁéá: **${Math.round((userAchievements.length / this.getTotalAchievementCount()) * 100)}%**`,
                        inline: true
                    },
                    {
                        name: 'üó∫Ô∏è Êé¢Á¥¢Áµ±Ë®à',
                        value: `‚Ä¢ ÂÖ®„Ç®„É™„Ç¢Âà∂Ë¶á: **${stats.allAreasExplored ? '„ÅØ„ÅÑ' : '„ÅÑ„ÅÑ„Åà'}**`,
                        inline: true
                    }
                )
                .setTimestamp();

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('Áµ±Ë®àË°®Á§∫„Ç®„É©„Éº:', error);
            await interaction.editReply({ content: 'Áµ±Ë®àÊÉÖÂ†±„ÅÆË°®Á§∫‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ' });
        }
    }, // ‚Üê„Ç≥„É≥„ÉûËøΩÂä†

    async handleProgressCommand(interaction, userId, userName, serverId) {
        try {
            const stats = await achievementManager.getUserStats(userId, serverId);
            const userAchievements = await achievementManager.getUserAchievements(userId, serverId);

            const embed = new EmbedBuilder()
                .setTitle('üìà Áß∞Âè∑ÈÄ≤Êçó')
                .setDescription(`${userName}„Åï„Çì„ÅÆÊú™ÂèñÂæóÁß∞Âè∑„ÅÆÈÄ≤ÊçóÁä∂Ê≥Å`)
                .setColor(0xFFA500)
                .setTimestamp();

            const progressList = [];

            // ÂÖ®„Å¶„ÅÆÁß∞Âè∑„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶ÈÄ≤Êçó„ÇíË®àÁÆó
            for (const [category, achievements] of Object.entries(achievementManager.achievements)) {
                for (const [title, achievement] of Object.entries(achievements)) {
                    
                    // Êó¢„Å´ÂèñÂæóÊ∏à„Åø„ÅÆÁß∞Âè∑„ÅØ„Çπ„Ç≠„ÉÉ„Éó
                    if (userAchievements.includes(title)) continue;

                    const progress = this.calculateProgress(achievement, stats);
                    if (progress.percentage > 0) {
                        progressList.push({
                            title,
                            achievement,
                            progress,
                            category
                        });
                    }
                }
            }

            // ÈÄ≤ÊçóÁéá„Åß„ÇΩ„Éº„Éà
            progressList.sort((a, b) => b.progress.percentage - a.progress.percentage);

            if (progressList.length === 0) {
                embed.addFields({
                    name: 'üéâ „Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ',
                    value: 'ÈÄ≤Êçó‰∏≠„ÅÆÁß∞Âè∑„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÊñ∞„Åó„ÅÑÊ¥ªÂãï„ÇíÂßã„ÇÅ„Å¶„Åø„Åæ„Åó„Çá„ÅÜÔºÅ',
                    inline: false
                });
            } else {
                // ‰∏ä‰Ωç10ÂÄã„ÅÆÈÄ≤Êçó„ÇíË°®Á§∫
                const topProgress = progressList.slice(0, 10);
                
                for (const item of topProgress) {
                    const progressBar = this.createProgressBar(item.progress.percentage);
                    const progressText = `${progressBar} ${item.progress.current}/${item.progress.required} (${Math.round(item.progress.percentage)}%)\n*${item.achievement.description}*`;
                    
                    embed.addFields({
                        name: `${item.achievement.emoji} ${item.title}`,
                        value: progressText,
                        inline: false
                    });
                }

                if (progressList.length > 10) {
                    embed.addFields({
                        name: 'üìã „Åù„ÅÆ‰ªñ',
                        value: `‰ªñ„Å´${progressList.length - 10}ÂÄã„ÅÆÁß∞Âè∑„ÅåÈÄ≤Ë°å‰∏≠„Åß„Åô`,
                        inline: false
                    });
                }
            }

            await interaction.editReply({ embeds: [embed] });

        } catch (error) {
            console.error('ÈÄ≤ÊçóË°®Á§∫„Ç®„É©„Éº:', error);
            await interaction.editReply({ content: 'ÈÄ≤ÊçóÊÉÖÂ†±„ÅÆË°®Á§∫‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ' });
        }
    }, // ‚Üê„Ç≥„É≥„ÉûËøΩÂä†

    findAchievementByTitle(title) {
        for (const [category, achievements] of Object.entries(achievementManager.achievements)) {
            if (achievements[title]) {
                return achievements[title];
            }
        }
        return null;
    }, // ‚Üê„Ç≥„É≥„ÉûËøΩÂä†

    calculateUserRank(stats, achievementCount) {
        const totalActivity = (stats.totalFeeds || 0) + (stats.totalGachas || 0) + (stats.maxAffinityBirds || 0) * 10 + achievementCount * 5;

        if (totalActivity >= 1000) {
            return { emoji: 'üèÜ', name: 'È≥•È°ûÂúí„Éû„Çπ„Çø„Éº', description: 'ÂúßÂÄíÁöÑ„Å™ÂÆüÁ∏æ„ÇíÊåÅ„Å§‰ºùË™¨„ÅÆÈ≥•ÊÑõÂ•ΩÂÆ∂' };
        } else if (totalActivity >= 500) {
            return { emoji: 'üëë', name: 'È≥•È°ûÂúí„ÅÆÈö†ËÄÖ', description: 'Â§ö„Åè„ÅÆÈ≥•„Åü„Å°„Åã„Çâ‰ø°È†º„ÇíÂãù„Å°Âèñ„Å£„ÅüËÄÖ' };
        } else if (totalActivity >= 200) {
            return { emoji: 'üéñÔ∏è', name: 'È≥•È°ûÂúí„ÅÆÂÆàË≠∑ËÄÖ', description: 'È≥•„Å´ÊÑõ„Åï„ÇåÈ≥•„ÇíÊÑõ„ÅôËÄÖ' };
        } else if (totalActivity >= 50) {
            return { emoji: 'ü•â', name: 'ÁÑ°È°û„ÅÆÈ≥•Â•Ω„Åç', description: 'È≥•È°ûÂúí„Å´Ë¶™„Åó„Çì„Åß„ÅÑ„ÇãÊÑõÂ•ΩÂÆ∂' };
        } else {
            return { emoji: 'üê£', name: 'Êñ∞Á±≥Êé¢Á¥¢ËÄÖ', description: 'È≥•È°ûÂúí„Åß„ÅÆÂÜíÈô∫„ÇíÂßã„ÇÅ„Åü„Å∞„Åã„Çä' };
        }
    },

    calculateProgress(achievement, stats) {
        let current = 0;
        let required = 0;

        switch (achievement.condition) {
            case 'totalFeeds':
                current = stats.totalFeeds || 0;
                required = achievement.requirement;
                break;
            case 'maxAffinityBirds':
                current = stats.maxAffinityBirds || 0;
                required = achievement.requirement;
                break;
            case 'totalGiftsReceived':
                current = stats.totalGiftsReceived || 0;
                required = achievement.requirement;
                break;
            case 'totalGiftsGiven':
                current = stats.totalGiftsGiven || 0;
                required = achievement.requirement;
                break;
            case 'uniqueBirdsFed':
                current = stats.uniqueBirdsFed || 0;
                required = achievement.requirement;
                break;
            case 'totalGachas':
                current = stats.totalGachas || 0;
                required = achievement.requirement;
                break;
            case 'visitorsInvited':
                current = stats.visitorsInvited || 0;
                required = achievement.requirement;
                break;
            case 'morningFeeds':
                current = stats.morningFeeds || 0;
                required = achievement.requirement;
                break;
            case 'lateFeeds':
                current = stats.lateFeeds || 0;
                required = achievement.requirement;
                break;
            case 'allAreasExplored':
                current = stats.allAreasExplored || 0;
                required = achievement.requirement;
                break;
            case 'multiCondition':
                const progresses = Object.entries(achievement.requirements).map(([key, value]) => 
                    Math.min(100, ((stats[key] || 0) / value) * 100)
                );
                const minProgress = Math.min(...progresses);
                return {
                    current: Math.round(minProgress),
                    required: 100,
                    percentage: minProgress
                };
            default:
                return { current: 0, required: 1, percentage: 0 };
        }

        const percentage = Math.min(100, (current / required) * 100);
        return { current, required, percentage };
    }, // ‚Üê„Ç≥„É≥„ÉûËøΩÂä†

    createProgressBar(percentage) {
        const barLength = 10;
        const filledLength = Math.round((percentage / 100) * barLength);
        const emptyLength = barLength - filledLength;
        
        return '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(emptyLength);
    }, // ‚Üê„Ç≥„É≥„ÉûËøΩÂä†

    getTotalAchievementCount() {
        let count = 0;
        for (const [category, achievements] of Object.entries(achievementManager.achievements)) {
            count += Object.keys(achievements).length;
        }
        return count;
    } // ‚ÜêÊúÄÂæå„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÅØ„Ç≥„É≥„Éû„Å™„Åó
};
